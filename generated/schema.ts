// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class StakeEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save StakeEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakeEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ExampleEntity", id.toString(), this);
  }

  static load(id: string): StakeEntity | null {
    return store.get("StakeEntity", id) as StakeEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    return value.toBytes();
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get stakeId(): BigInt {
    let value = this.get("stakeId");
    return value.toBigInt();
  }

  set stakeId(value: BigInt) {
    this.set("stakeId", Value.fromBigInt(value));
  }

  get referrerAddress(): Bytes {
    let value = this.get("referrerAddress");
    return value.toBytes();
  }

  set referrerAddress(value: Bytes) {
    this.set("referrerAddress", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get stakedAmount(): BigInt {
    let value = this.get("stakedAmount");
    return value.toBigInt();
  }

  set stakedAmount(value: BigInt) {
    this.set("stakedAmount", Value.fromBigInt(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }
}

export class ClaimEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ClaimEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ClaimEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ClaimEntity", id.toString(), this);
  }

  static load(id: string): ClaimEntity | null {
    return store.get("ClaimEntity", id) as ClaimEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    return value.toBytes();
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get stakedTokenAddress(): Bytes {
    let value = this.get("stakeId");
    return value.toBytes();
  }

  set stakedTokenAddress(value: Bytes) {
    this.set("stakeId", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get claimRewards(): BigInt {
    let value = this.get("claimRewards");
    return value.toBigInt();
  }

  set claimRewards(value: BigInt) {
    this.set("claimRewards", Value.fromBigInt(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }
}

export class UnStakeEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UnStakeEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnStakeEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UnStakeEntity", id.toString(), this);
  }

  static load(id: string): UnStakeEntity | null {
    return store.get("UnStakeEntity", id) as UnStakeEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    return value.toBytes();
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get unStakedtokenAddress(): Bytes {
    let value = this.get("stakeId");
    return value.toBytes();
  }

  set unStakedtokenAddress(value: Bytes) {
    this.set("stakeId", Value.fromBytes(value));
  }

  get unStakedAmount(): BigInt {
    let value = this.get("unStakedAmount");
    return value.toBigInt();
  }

  set unStakedAmount(value: BigInt) {
    this.set("unStakedAmount", Value.fromBigInt(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get stakeId(): BigInt {
    let value = this.get("stakeId");
    return value.toBigInt();
  }

  set stakeId(value: BigInt) {
    this.set("stakeId", Value.fromBigInt(value));
  }
}

export class ReferralEarnEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ReferralEarnEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ReferralEarnEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ReferralEarnEntity", id.toString(), this);
  }

  static load(id: string): ReferralEarnEntity | null {
    return store.get("ReferralEarnEntity", id) as ReferralEarnEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    return value.toBytes();
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get callerAddress(): string {
    let value = this.get("callerAddress");
    return value.toString();
  }

  set callerAddress(value: string) {
    this.set("callerAddress", Value.fromString(value));
  }

  get rewardTokenAddress(): BigInt {
    let value = this.get("rewardTokenAddress");
    return value.toBigInt();
  }

  set rewardTokenAddress(value: BigInt) {
    this.set("rewardTokenAddress", Value.fromBigInt(value));
  }

  get rewardAmount(): BigInt {
    let value = this.get("rewardAmount");
    return value.toBigInt();
  }

  set rewardAmount(value: BigInt) {
    this.set("rewardAmount", Value.fromBigInt(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }
}