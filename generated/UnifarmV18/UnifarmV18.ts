// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BlockedDetails extends ethereum.Event {
  get params(): BlockedDetails__Params {
    return new BlockedDetails__Params(this);
  }
}

export class BlockedDetails__Params {
  _event: BlockedDetails;

  constructor(event: BlockedDetails) {
    this._event = event;
  }

  get stakedTokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewardTokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get blockedStatus(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get time(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stakedTokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get claimRewards(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class DailyDistributionDetails extends ethereum.Event {
  get params(): DailyDistributionDetails__Params {
    return new DailyDistributionDetails__Params(this);
  }
}

export class DailyDistributionDetails__Params {
  _event: DailyDistributionDetails;

  constructor(event: DailyDistributionDetails) {
    this._event = event;
  }

  get stakedTokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewardTokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get rewards(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class IntervalDaysDetails extends ethereum.Event {
  get params(): IntervalDaysDetails__Params {
    return new IntervalDaysDetails__Params(this);
  }
}

export class IntervalDaysDetails__Params {
  _event: IntervalDaysDetails;

  constructor(event: IntervalDaysDetails) {
    this._event = event;
  }

  get updatedIntervals(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LockableTokenDetails extends ethereum.Event {
  get params(): LockableTokenDetails__Params {
    return new LockableTokenDetails__Params(this);
  }
}

export class LockableTokenDetails__Params {
  _event: LockableTokenDetails;

  constructor(event: LockableTokenDetails) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lockableDys(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get optionalbleStatus(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get updatedTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OptionableBenefitDetails extends ethereum.Event {
  get params(): OptionableBenefitDetails__Params {
    return new OptionableBenefitDetails__Params(this);
  }
}

export class OptionableBenefitDetails__Params {
  _event: OptionableBenefitDetails;

  constructor(event: OptionableBenefitDetails) {
    this._event = event;
  }

  get updatedBenefit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ReferralEarn extends ethereum.Event {
  get params(): ReferralEarn__Params {
    return new ReferralEarn__Params(this);
  }
}

export class ReferralEarn__Params {
  _event: ReferralEarn;

  constructor(event: ReferralEarn) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get callerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get rewardTokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get rewardAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ReferrerPercentageDetails extends ethereum.Event {
  get params(): ReferrerPercentageDetails__Params {
    return new ReferrerPercentageDetails__Params(this);
  }
}

export class ReferrerPercentageDetails__Params {
  _event: ReferrerPercentageDetails;

  constructor(event: ReferrerPercentageDetails) {
    this._event = event;
  }

  get updatedRefPercentage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SequenceDetails extends ethereum.Event {
  get params(): SequenceDetails__Params {
    return new SequenceDetails__Params(this);
  }
}

export class SequenceDetails__Params {
  _event: SequenceDetails;

  constructor(event: SequenceDetails) {
    this._event = event;
  }

  get stakedTokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewardTokenSequence(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get time(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Stake extends ethereum.Event {
  get params(): Stake__Params {
    return new Stake__Params(this);
  }
}

export class Stake__Params {
  _event: Stake;

  constructor(event: Stake) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stakeId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get referrerAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get stakedAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class StakeDurationDetails extends ethereum.Event {
  get params(): StakeDurationDetails__Params {
    return new StakeDurationDetails__Params(this);
  }
}

export class StakeDurationDetails__Params {
  _event: StakeDurationDetails;

  constructor(event: StakeDurationDetails) {
    this._event = event;
  }

  get updatedDuration(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokenDetails extends ethereum.Event {
  get params(): TokenDetails__Params {
    return new TokenDetails__Params(this);
  }
}

export class TokenDetails__Params {
  _event: TokenDetails;

  constructor(event: TokenDetails) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get userMinStake(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get userMaxStake(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalMaxStake(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get updatedTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class UnStake extends ethereum.Event {
  get params(): UnStake__Params {
    return new UnStake__Params(this);
  }
}

export class UnStake__Params {
  _event: UnStake;

  constructor(event: UnStake) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get unStakedtokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get unStakedAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get stakeId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WithdrawDetails extends ethereum.Event {
  get params(): WithdrawDetails__Params {
    return new WithdrawDetails__Params(this);
  }
}

export class WithdrawDetails__Params {
  _event: WithdrawDetails;

  constructor(event: WithdrawDetails) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get withdrawalAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UnifarmV18__tokenDetailsResult {
  value0: boolean;
  value1: i32;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;

  constructor(
    value0: boolean,
    value1: i32,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }
}

export class UnifarmV18__viewStakingDetailsResult {
  value0: Array<Address>;
  value1: Array<Address>;
  value2: Array<boolean>;
  value3: Array<BigInt>;
  value4: Array<BigInt>;
  value5: Array<BigInt>;

  constructor(
    value0: Array<Address>,
    value1: Array<Address>,
    value2: Array<boolean>,
    value3: Array<BigInt>,
    value4: Array<BigInt>,
    value5: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromAddressArray(this.value1));
    map.set("value2", ethereum.Value.fromBooleanArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigIntArray(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigIntArray(this.value5));
    return map;
  }
}

export class UnifarmV18 extends ethereum.SmartContract {
  static bind(address: Address): UnifarmV18 {
    return new UnifarmV18("UnifarmV18", address);
  }

  DAYS(): BigInt {
    let result = super.call("DAYS", "DAYS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DAYS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DAYS", "DAYS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  HOURS(): BigInt {
    let result = super.call("HOURS", "HOURS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_HOURS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("HOURS", "HOURS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _admin(): Address {
    let result = super.call("_admin", "_admin():(address)", []);

    return result[0].toAddress();
  }

  try__admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("_admin", "_admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _owner(): Address {
    let result = super.call("_owner", "_owner():(address)", []);

    return result[0].toAddress();
  }

  try__owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("_owner", "_owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  addToken(
    tokenAddress: Address,
    userMinStake: BigInt,
    userMaxStake: BigInt,
    totalStake: BigInt,
    decimal: i32
  ): boolean {
    let result = super.call(
      "addToken",
      "addToken(address,uint256,uint256,uint256,uint8):(bool)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(userMinStake),
        ethereum.Value.fromUnsignedBigInt(userMaxStake),
        ethereum.Value.fromUnsignedBigInt(totalStake),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(decimal))
      ]
    );

    return result[0].toBoolean();
  }

  try_addToken(
    tokenAddress: Address,
    userMinStake: BigInt,
    userMaxStake: BigInt,
    totalStake: BigInt,
    decimal: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "addToken",
      "addToken(address,uint256,uint256,uint256,uint8):(bool)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(userMinStake),
        ethereum.Value.fromUnsignedBigInt(userMaxStake),
        ethereum.Value.fromUnsignedBigInt(totalStake),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(decimal))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getOneDayReward(
    stakedAmount: BigInt,
    stakedToken: Address,
    rewardToken: Address,
    totalStake: BigInt
  ): BigInt {
    let result = super.call(
      "getOneDayReward",
      "getOneDayReward(uint256,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(stakedAmount),
        ethereum.Value.fromAddress(stakedToken),
        ethereum.Value.fromAddress(rewardToken),
        ethereum.Value.fromUnsignedBigInt(totalStake)
      ]
    );

    return result[0].toBigInt();
  }

  try_getOneDayReward(
    stakedAmount: BigInt,
    stakedToken: Address,
    rewardToken: Address,
    totalStake: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOneDayReward",
      "getOneDayReward(uint256,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(stakedAmount),
        ethereum.Value.fromAddress(stakedToken),
        ethereum.Value.fromAddress(rewardToken),
        ethereum.Value.fromUnsignedBigInt(totalStake)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  intervalDays(param0: BigInt): BigInt {
    let result = super.call("intervalDays", "intervalDays(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_intervalDays(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "intervalDays",
      "intervalDays(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  optionableBenefit(): BigInt {
    let result = super.call(
      "optionableBenefit",
      "optionableBenefit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_optionableBenefit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "optionableBenefit",
      "optionableBenefit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pause(): boolean {
    let result = super.call("pause", "pause():(bool)", []);

    return result[0].toBoolean();
  }

  try_pause(): ethereum.CallResult<boolean> {
    let result = super.tryCall("pause", "pause():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  poolStartTime(): BigInt {
    let result = super.call("poolStartTime", "poolStartTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolStartTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "poolStartTime",
      "poolStartTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  refPercentage(): BigInt {
    let result = super.call("refPercentage", "refPercentage():(uint256)", []);

    return result[0].toBigInt();
  }

  try_refPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "refPercentage",
      "refPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardCap(param0: Address): BigInt {
    let result = super.call("rewardCap", "rewardCap(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_rewardCap(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardCap", "rewardCap(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  setRewardCap(
    tokenAddresses: Array<Address>,
    rewards: Array<BigInt>
  ): boolean {
    let result = super.call(
      "setRewardCap",
      "setRewardCap(address[],uint256[]):(bool)",
      [
        ethereum.Value.fromAddressArray(tokenAddresses),
        ethereum.Value.fromUnsignedBigIntArray(rewards)
      ]
    );

    return result[0].toBoolean();
  }

  try_setRewardCap(
    tokenAddresses: Array<Address>,
    rewards: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setRewardCap",
      "setRewardCap(address[],uint256[]):(bool)",
      [
        ethereum.Value.fromAddressArray(tokenAddresses),
        ethereum.Value.fromUnsignedBigIntArray(rewards)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stakeDuration(): BigInt {
    let result = super.call("stakeDuration", "stakeDuration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_stakeDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakeDuration",
      "stakeDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingDetails(param0: Address): Address {
    let result = super.call(
      "stakingDetails",
      "stakingDetails(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_stakingDetails(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakingDetails",
      "stakingDetails(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenBlockedStatus(param0: Address, param1: Address): boolean {
    let result = super.call(
      "tokenBlockedStatus",
      "tokenBlockedStatus(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_tokenBlockedStatus(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "tokenBlockedStatus",
      "tokenBlockedStatus(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenDailyDistribution(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "tokenDailyDistribution",
      "tokenDailyDistribution(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_tokenDailyDistribution(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenDailyDistribution",
      "tokenDailyDistribution(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenDetails(param0: Address): UnifarmV18__tokenDetailsResult {
    let result = super.call(
      "tokenDetails",
      "tokenDetails(address):(bool,uint8,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new UnifarmV18__tokenDetailsResult(
      result[0].toBoolean(),
      result[1].toI32(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean()
    );
  }

  try_tokenDetails(
    param0: Address
  ): ethereum.CallResult<UnifarmV18__tokenDetailsResult> {
    let result = super.tryCall(
      "tokenDetails",
      "tokenDetails(address):(bool,uint8,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UnifarmV18__tokenDetailsResult(
        value[0].toBoolean(),
        value[1].toI32(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean()
      )
    );
  }

  tokens(param0: BigInt): Address {
    let result = super.call("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_tokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokensSequenceList(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "tokensSequenceList",
      "tokensSequenceList(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_tokensSequenceList(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokensSequenceList",
      "tokensSequenceList(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalStaking(param0: Address): BigInt {
    let result = super.call("totalStaking", "totalStaking(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_totalStaking(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStaking",
      "totalStaking(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trustedForwarder(): Address {
    let result = super.call(
      "trustedForwarder",
      "trustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_trustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "trustedForwarder",
      "trustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unStake(userAddress: Address, stakeId: BigInt): boolean {
    let result = super.call("unStake", "unStake(address,uint256):(bool)", [
      ethereum.Value.fromAddress(userAddress),
      ethereum.Value.fromUnsignedBigInt(stakeId)
    ]);

    return result[0].toBoolean();
  }

  try_unStake(
    userAddress: Address,
    stakeId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("unStake", "unStake(address,uint256):(bool)", [
      ethereum.Value.fromAddress(userAddress),
      ethereum.Value.fromUnsignedBigInt(stakeId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unpause(): boolean {
    let result = super.call("unpause", "unpause():(bool)", []);

    return result[0].toBoolean();
  }

  try_unpause(): ethereum.CallResult<boolean> {
    let result = super.tryCall("unpause", "unpause():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userTotalStaking(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "userTotalStaking",
      "userTotalStaking(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_userTotalStaking(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userTotalStaking",
      "userTotalStaking(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  versionRecipient(): string {
    let result = super.call(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );

    return result[0].toString();
  }

  try_versionRecipient(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  viewStakingDetails(_user: Address): UnifarmV18__viewStakingDetailsResult {
    let result = super.call(
      "viewStakingDetails",
      "viewStakingDetails(address):(address[],address[],bool[],uint256[],uint256[],uint256[])",
      [ethereum.Value.fromAddress(_user)]
    );

    return new UnifarmV18__viewStakingDetailsResult(
      result[0].toAddressArray(),
      result[1].toAddressArray(),
      result[2].toBooleanArray(),
      result[3].toBigIntArray(),
      result[4].toBigIntArray(),
      result[5].toBigIntArray()
    );
  }

  try_viewStakingDetails(
    _user: Address
  ): ethereum.CallResult<UnifarmV18__viewStakingDetailsResult> {
    let result = super.tryCall(
      "viewStakingDetails",
      "viewStakingDetails(address):(address[],address[],bool[],uint256[],uint256[],uint256[])",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UnifarmV18__viewStakingDetailsResult(
        value[0].toAddressArray(),
        value[1].toAddressArray(),
        value[2].toBooleanArray(),
        value[3].toBigIntArray(),
        value[4].toBigIntArray(),
        value[5].toBigIntArray()
      )
    );
  }

  viewTokensCount(): BigInt {
    let result = super.call(
      "viewTokensCount",
      "viewTokensCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_viewTokensCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewTokensCount",
      "viewTokensCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddTokenCall extends ethereum.Call {
  get inputs(): AddTokenCall__Inputs {
    return new AddTokenCall__Inputs(this);
  }

  get outputs(): AddTokenCall__Outputs {
    return new AddTokenCall__Outputs(this);
  }
}

export class AddTokenCall__Inputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get userMinStake(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get userMaxStake(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get totalStake(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get decimal(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class AddTokenCall__Outputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ChangeTokenBlockedStatusCall extends ethereum.Call {
  get inputs(): ChangeTokenBlockedStatusCall__Inputs {
    return new ChangeTokenBlockedStatusCall__Inputs(this);
  }

  get outputs(): ChangeTokenBlockedStatusCall__Outputs {
    return new ChangeTokenBlockedStatusCall__Outputs(this);
  }
}

export class ChangeTokenBlockedStatusCall__Inputs {
  _call: ChangeTokenBlockedStatusCall;

  constructor(call: ChangeTokenBlockedStatusCall) {
    this._call = call;
  }

  get stakedToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rewardToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class ChangeTokenBlockedStatusCall__Outputs {
  _call: ChangeTokenBlockedStatusCall;

  constructor(call: ChangeTokenBlockedStatusCall) {
    this._call = call;
  }
}

export class EmergencyUnstakeCall extends ethereum.Call {
  get inputs(): EmergencyUnstakeCall__Inputs {
    return new EmergencyUnstakeCall__Inputs(this);
  }

  get outputs(): EmergencyUnstakeCall__Outputs {
    return new EmergencyUnstakeCall__Outputs(this);
  }
}

export class EmergencyUnstakeCall__Inputs {
  _call: EmergencyUnstakeCall;

  constructor(call: EmergencyUnstakeCall) {
    this._call = call;
  }

  get stakeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get userAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get rewardtokens(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get amount(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class EmergencyUnstakeCall__Outputs {
  _call: EmergencyUnstakeCall;

  constructor(call: EmergencyUnstakeCall) {
    this._call = call;
  }
}

export class LockableTokenCall extends ethereum.Call {
  get inputs(): LockableTokenCall__Inputs {
    return new LockableTokenCall__Inputs(this);
  }

  get outputs(): LockableTokenCall__Outputs {
    return new LockableTokenCall__Outputs(this);
  }
}

export class LockableTokenCall__Inputs {
  _call: LockableTokenCall;

  constructor(call: LockableTokenCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get lockableStatus(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get lockedDays(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get optionableStatus(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class LockableTokenCall__Outputs {
  _call: LockableTokenCall;

  constructor(call: LockableTokenCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeWithdrawCall extends ethereum.Call {
  get inputs(): SafeWithdrawCall__Inputs {
    return new SafeWithdrawCall__Inputs(this);
  }

  get outputs(): SafeWithdrawCall__Outputs {
    return new SafeWithdrawCall__Outputs(this);
  }
}

export class SafeWithdrawCall__Inputs {
  _call: SafeWithdrawCall;

  constructor(call: SafeWithdrawCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SafeWithdrawCall__Outputs {
  _call: SafeWithdrawCall;

  constructor(call: SafeWithdrawCall) {
    this._call = call;
  }
}

export class SetDailyDistributionCall extends ethereum.Call {
  get inputs(): SetDailyDistributionCall__Inputs {
    return new SetDailyDistributionCall__Inputs(this);
  }

  get outputs(): SetDailyDistributionCall__Outputs {
    return new SetDailyDistributionCall__Outputs(this);
  }
}

export class SetDailyDistributionCall__Inputs {
  _call: SetDailyDistributionCall;

  constructor(call: SetDailyDistributionCall) {
    this._call = call;
  }

  get stakedToken(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get rewardToken(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get dailyDistribution(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class SetDailyDistributionCall__Outputs {
  _call: SetDailyDistributionCall;

  constructor(call: SetDailyDistributionCall) {
    this._call = call;
  }
}

export class SetRewardCapCall extends ethereum.Call {
  get inputs(): SetRewardCapCall__Inputs {
    return new SetRewardCapCall__Inputs(this);
  }

  get outputs(): SetRewardCapCall__Outputs {
    return new SetRewardCapCall__Outputs(this);
  }
}

export class SetRewardCapCall__Inputs {
  _call: SetRewardCapCall;

  constructor(call: SetRewardCapCall) {
    this._call = call;
  }

  get tokenAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get rewards(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SetRewardCapCall__Outputs {
  _call: SetRewardCapCall;

  constructor(call: SetRewardCapCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get referrerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnStakeCall extends ethereum.Call {
  get inputs(): UnStakeCall__Inputs {
    return new UnStakeCall__Inputs(this);
  }

  get outputs(): UnStakeCall__Outputs {
    return new UnStakeCall__Outputs(this);
  }
}

export class UnStakeCall__Inputs {
  _call: UnStakeCall;

  constructor(call: UnStakeCall) {
    this._call = call;
  }

  get userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get stakeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnStakeCall__Outputs {
  _call: UnStakeCall;

  constructor(call: UnStakeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateIntervalDaysCall extends ethereum.Call {
  get inputs(): UpdateIntervalDaysCall__Inputs {
    return new UpdateIntervalDaysCall__Inputs(this);
  }

  get outputs(): UpdateIntervalDaysCall__Outputs {
    return new UpdateIntervalDaysCall__Outputs(this);
  }
}

export class UpdateIntervalDaysCall__Inputs {
  _call: UpdateIntervalDaysCall;

  constructor(call: UpdateIntervalDaysCall) {
    this._call = call;
  }

  get _interval(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class UpdateIntervalDaysCall__Outputs {
  _call: UpdateIntervalDaysCall;

  constructor(call: UpdateIntervalDaysCall) {
    this._call = call;
  }
}

export class UpdateOptionableBenefitCall extends ethereum.Call {
  get inputs(): UpdateOptionableBenefitCall__Inputs {
    return new UpdateOptionableBenefitCall__Inputs(this);
  }

  get outputs(): UpdateOptionableBenefitCall__Outputs {
    return new UpdateOptionableBenefitCall__Outputs(this);
  }
}

export class UpdateOptionableBenefitCall__Inputs {
  _call: UpdateOptionableBenefitCall;

  constructor(call: UpdateOptionableBenefitCall) {
    this._call = call;
  }

  get benefit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateOptionableBenefitCall__Outputs {
  _call: UpdateOptionableBenefitCall;

  constructor(call: UpdateOptionableBenefitCall) {
    this._call = call;
  }
}

export class UpdateRefPercentageCall extends ethereum.Call {
  get inputs(): UpdateRefPercentageCall__Inputs {
    return new UpdateRefPercentageCall__Inputs(this);
  }

  get outputs(): UpdateRefPercentageCall__Outputs {
    return new UpdateRefPercentageCall__Outputs(this);
  }
}

export class UpdateRefPercentageCall__Inputs {
  _call: UpdateRefPercentageCall;

  constructor(call: UpdateRefPercentageCall) {
    this._call = call;
  }

  get refPer(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateRefPercentageCall__Outputs {
  _call: UpdateRefPercentageCall;

  constructor(call: UpdateRefPercentageCall) {
    this._call = call;
  }
}

export class UpdateSequenceCall extends ethereum.Call {
  get inputs(): UpdateSequenceCall__Inputs {
    return new UpdateSequenceCall__Inputs(this);
  }

  get outputs(): UpdateSequenceCall__Outputs {
    return new UpdateSequenceCall__Outputs(this);
  }
}

export class UpdateSequenceCall__Inputs {
  _call: UpdateSequenceCall;

  constructor(call: UpdateSequenceCall) {
    this._call = call;
  }

  get stakedToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rewardTokenSequence(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class UpdateSequenceCall__Outputs {
  _call: UpdateSequenceCall;

  constructor(call: UpdateSequenceCall) {
    this._call = call;
  }
}

export class UpdateStakeDurationCall extends ethereum.Call {
  get inputs(): UpdateStakeDurationCall__Inputs {
    return new UpdateStakeDurationCall__Inputs(this);
  }

  get outputs(): UpdateStakeDurationCall__Outputs {
    return new UpdateStakeDurationCall__Outputs(this);
  }
}

export class UpdateStakeDurationCall__Inputs {
  _call: UpdateStakeDurationCall;

  constructor(call: UpdateStakeDurationCall) {
    this._call = call;
  }

  get durationTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateStakeDurationCall__Outputs {
  _call: UpdateStakeDurationCall;

  constructor(call: UpdateStakeDurationCall) {
    this._call = call;
  }
}

export class UpdateTokenCall extends ethereum.Call {
  get inputs(): UpdateTokenCall__Inputs {
    return new UpdateTokenCall__Inputs(this);
  }

  get outputs(): UpdateTokenCall__Outputs {
    return new UpdateTokenCall__Outputs(this);
  }
}

export class UpdateTokenCall__Inputs {
  _call: UpdateTokenCall;

  constructor(call: UpdateTokenCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get userMinStake(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get userMaxStake(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get totalStake(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateTokenCall__Outputs {
  _call: UpdateTokenCall;

  constructor(call: UpdateTokenCall) {
    this._call = call;
  }
}

export class UpdateTrustForwarderCall extends ethereum.Call {
  get inputs(): UpdateTrustForwarderCall__Inputs {
    return new UpdateTrustForwarderCall__Inputs(this);
  }

  get outputs(): UpdateTrustForwarderCall__Outputs {
    return new UpdateTrustForwarderCall__Outputs(this);
  }
}

export class UpdateTrustForwarderCall__Inputs {
  _call: UpdateTrustForwarderCall;

  constructor(call: UpdateTrustForwarderCall) {
    this._call = call;
  }

  get _newTrustForwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTrustForwarderCall__Outputs {
  _call: UpdateTrustForwarderCall;

  constructor(call: UpdateTrustForwarderCall) {
    this._call = call;
  }
}
